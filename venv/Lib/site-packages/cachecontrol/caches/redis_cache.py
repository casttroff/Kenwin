<<<<<<< HEAD:src/venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py
<<<<<<< HEAD
=======
>>>>>>> 046ad256a398d9d54ac14544e0e95919dbd47af5:venv/Lib/site-packages/cachecontrol/caches/redis_cache.py
# SPDX-FileCopyrightText: 2015 Eric Larson
#
# SPDX-License-Identifier: Apache-2.0

<<<<<<< HEAD:src/venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py
=======
>>>>>>> 8ea21d60320e8cc8ae7d381c28e4c334b8d95b8b
=======
>>>>>>> 046ad256a398d9d54ac14544e0e95919dbd47af5:venv/Lib/site-packages/cachecontrol/caches/redis_cache.py
from __future__ import division

from datetime import datetime
from cachecontrol.cache import BaseCache


class RedisCache(BaseCache):

    def __init__(self, conn):
        self.conn = conn

    def get(self, key):
        return self.conn.get(key)

    def set(self, key, value, expires=None):
        if not expires:
            self.conn.set(key, value)
<<<<<<< HEAD:src/venv/Lib/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py
<<<<<<< HEAD
        elif isinstance(expires, datetime):
            expires = expires - datetime.utcnow()
            self.conn.setex(key, int(expires.total_seconds()), value)
        else:
            self.conn.setex(key, expires, value)
=======
        else:
            expires = expires - datetime.utcnow()
            self.conn.setex(key, int(expires.total_seconds()), value)
>>>>>>> 8ea21d60320e8cc8ae7d381c28e4c334b8d95b8b
=======
        elif isinstance(expires, datetime):
            expires = expires - datetime.utcnow()
            self.conn.setex(key, int(expires.total_seconds()), value)
        else:
            self.conn.setex(key, expires, value)
>>>>>>> 046ad256a398d9d54ac14544e0e95919dbd47af5:venv/Lib/site-packages/cachecontrol/caches/redis_cache.py

    def delete(self, key):
        self.conn.delete(key)

    def clear(self):
        """Helper for clearing all the keys in a database. Use with
        caution!"""
        for key in self.conn.keys():
            self.conn.delete(key)

    def close(self):
        """Redis uses connection pooling, no need to close the connection."""
        pass
